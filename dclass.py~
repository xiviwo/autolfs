#!/usr/bin/env python


blfsregx = [

(r"mkdir\s*-v",						"mkdir -pv"),
(r"mkdir\s*/",							"mkdir -pv /"),
(r"mkdir\s*",							"mkdir -pv "),
(r"export\s*LANG=\s*<ll>\s*_\s*<CC>\s*\.\s*<charmap>\s*<@modifiers>",		"export LANG=en_US.utf8"),
(r'"\s*<PREFIX>\s*"',						'"/opt"'),
(r"\s*</path/to/unzipped/files>\s*",				''),
(r'&&$',							''),
#(r"udev-lfs(-([0-9.]+))+",					Book._udev_version)
		
]


class A(object):
    	pass

def make_method(i,name):
    def _method(self,*args):
	print("method {0} in {1}".format(name, self))
	for arg in args:
        	print arg
	return blfsregx[i][1]
    return _method

def make_method2(i,name):
    def _method(self,*args):
	print "this is method2"
	for arg in args:
        	print arg
	return blfsregx[i][1]
    return _method

def mk_func_name():
    for i in range(len(blfsregx)):
	yield "func" + str(i)

for i,name in enumerate(mk_func_name()):
    _method = make_method(i,name)
    name2 = name + str(i)
    setattr(A, name, _method)
    setattr(A, name2, make_method2(i,name))

print A().func1(1)
print A().func0(2)
print A().func3(4)
print A().func4(6)
print A().func6(6,3,4,6,6,2)


